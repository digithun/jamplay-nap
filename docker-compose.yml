version: "3"

services:
  nap:
    container_name: nap
    env_file: .env
    environment:
      - PORT=${PORT:-3000}
      - BIGQUERY_SERVICE_ENDPOINT=http://bigqueryservice:3003
    image: rabbotio/nap
    restart: on-failure
    links:
      - redis
      - mongo
    working_dir: /usr/app
    ports:
      - "5858:5858" # Node Inspector port
      - "9222:9222" # Node V8 Inspector port
      - "${PORT:-3000}:${PORT:-3000}" # HTTP port
    volumes:
      - npm:/root/.npm
      - ./.env:/usr/app/.env
      - ./pages:/usr/app/pages
      - ./components:/usr/app/components
      - ./public:/usr/app/public
      - ./lib:/usr/app/lib
      - ./routes:/usr/app/routes
      - ./graphql:/usr/app/graphql
      - ./providers:/usr/app/providers # __DEV__
      - ./templates:/usr/app/templates # __DEV__
      - ./server:/usr/app/server # __DEV__
      - ./bigquery:/usr/app/bigquery # __DEV__
    build: . # __DEV__
    command: npm run _build-back # Will build next and run express server
    networks:
      - front
      - back

  redis:
    image: redis:3.2.6-alpine
    container_name: redis
    ports:
      - "6379:6379"
    restart: on-failure
    volumes:
      - redis_data:/data
    networks:
      - back

  mongo_data:  
    image: mongo:3.4
    container_name: mongo_data
    command: bin/true
    networks:
      - back

  mongo:  
    image: mongo:3.4
    container_name: mongo
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    restart: on-failure
    command: --smallfiles --rest
    networks:
      - back

  bigqueryservice:
    container_name: bigqueryservice
    env_file: 
      - ./bigquery.env
    environment:
      - IS_BIGQUERY_DEBUG_ENABLED=0
      # - - - - - express - - - - - -
      - BIGQUERY_PORT=3003
      # - - - - - - - - REDIS - - - - - -
      - REDIS_URI=redis://redis
    image: bigqueryservice
    restart: on-failure
    links:
      - redis
    working_dir: /usr/app
    # ports:
    #   - "3003:3003" # HTTP port , uncomment when want to test from outside docker
    command: node index.js
    networks:
      - back

networks:
  front:
  back:

volumes:
  npm:
  redis_data:
  mongo_data: